{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Bond specified amount of Token",
      "type": "object",
      "required": [
        "bond"
      ],
      "properties": {
        "bond": {
          "type": "object",
          "properties": {
            "receiver": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Donates specified amount of Token to pool",
      "type": "object",
      "required": [
        "donate"
      ],
      "properties": {
        "donate": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw Token that have finished unbonding in previous batches",
      "type": "object",
      "required": [
        "withdraw_unbonded"
      ],
      "properties": {
        "withdraw_unbonded": {
          "type": "object",
          "properties": {
            "receiver": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Add a validator to the whitelist; callable by the owner",
      "type": "object",
      "required": [
        "add_validator"
      ],
      "properties": {
        "add_validator": {
          "type": "object",
          "required": [
            "validator"
          ],
          "properties": {
            "validator": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Remove a validator from the whitelist; callable by the owner",
      "type": "object",
      "required": [
        "remove_validator"
      ],
      "properties": {
        "remove_validator": {
          "type": "object",
          "required": [
            "validator"
          ],
          "properties": {
            "validator": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Transfer ownership to another account; will not take effect unless the new owner accepts",
      "type": "object",
      "required": [
        "transfer_ownership"
      ],
      "properties": {
        "transfer_ownership": {
          "type": "object",
          "required": [
            "new_owner"
          ],
          "properties": {
            "new_owner": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Accept an ownership transfer",
      "type": "object",
      "required": [
        "accept_ownership"
      ],
      "properties": {
        "accept_ownership": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claim staking rewards, swap all for Token, and restake",
      "type": "object",
      "required": [
        "harvest"
      ],
      "properties": {
        "harvest": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Use redelegations to balance the amounts of Token delegated to validators",
      "type": "object",
      "required": [
        "rebalance"
      ],
      "properties": {
        "rebalance": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update Token amounts in unbonding batches to reflect any slashing or rounding errors",
      "type": "object",
      "required": [
        "reconcile"
      ],
      "properties": {
        "reconcile": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Submit the current pending batch of unbonding requests to be unbonded",
      "type": "object",
      "required": [
        "submit_batch"
      ],
      "properties": {
        "submit_batch": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Callbacks; can only be invoked by the contract itself",
      "type": "object",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "$ref": "#/definitions/CallbackMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Updates the fee config,",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "add_to_swap_config": {
              "description": "adds paths to the swap config",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/SwapPath"
              }
            },
            "protocol_fee_contract": {
              "description": "Contract address where fees are sent",
              "type": [
                "string",
                "null"
              ]
            },
            "protocol_reward_fee": {
              "description": "Fees that are being applied during reinvest of staking rewards",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "swap_config": {
              "description": "updates the whole swap config",
              "anyOf": [
                {
                  "$ref": "#/definitions/SwapConfig"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Submit an unbonding request to the current unbonding queue; automatically invokes `unbond` if `epoch_time` has elapsed since when the last unbonding queue was executed.",
      "type": "object",
      "required": [
        "queue_unbond"
      ],
      "properties": {
        "queue_unbond": {
          "type": "object",
          "properties": {
            "receiver": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "CallbackMsg": {
      "oneOf": [
        {
          "description": "Swap remaining tokens held by the contract to Token",
          "type": "object",
          "required": [
            "swap"
          ],
          "properties": {
            "swap": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Following the swaps, stake the Token acquired to the whitelisted validators",
          "type": "object",
          "required": [
            "reinvest"
          ],
          "properties": {
            "reinvest": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "SwapConfig": {
      "type": "object",
      "required": [
        "allowed_paths",
        "router_contract"
      ],
      "properties": {
        "allowed_paths": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SwapPath"
          }
        },
        "router_contract": {
          "type": "string"
        }
      }
    },
    "SwapPath": {
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  }
}
