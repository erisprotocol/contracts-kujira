{"$schema":"http://json-schema.org/draft-07/schema#","title":"ExecuteMsg","oneOf":[{"description":"Bond specified amount of Token","type":"object","required":["bond"],"properties":{"bond":{"type":"object","properties":{"receiver":{"type":["string","null"]}},"additionalProperties":false}},"additionalProperties":false},{"description":"Donates specified amount of Token to pool","type":"object","required":["donate"],"properties":{"donate":{"type":"object","additionalProperties":false}},"additionalProperties":false},{"description":"Withdraw Token that have finished unbonding in previous batches","type":"object","required":["withdraw_unbonded"],"properties":{"withdraw_unbonded":{"type":"object","properties":{"receiver":{"type":["string","null"]}},"additionalProperties":false}},"additionalProperties":false},{"description":"Add a validator to the whitelist; callable by the owner","type":"object","required":["add_validator"],"properties":{"add_validator":{"type":"object","required":["validator"],"properties":{"validator":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false},{"description":"Remove a validator from the whitelist; callable by the owner","type":"object","required":["remove_validator"],"properties":{"remove_validator":{"type":"object","required":["validator"],"properties":{"validator":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false},{"description":"Transfer ownership to another account; will not take effect unless the new owner accepts","type":"object","required":["transfer_ownership"],"properties":{"transfer_ownership":{"type":"object","required":["new_owner"],"properties":{"new_owner":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false},{"description":"Accept an ownership transfer","type":"object","required":["accept_ownership"],"properties":{"accept_ownership":{"type":"object","additionalProperties":false}},"additionalProperties":false},{"description":"Claim staking rewards, swap all for Token, and restake","type":"object","required":["harvest"],"properties":{"harvest":{"type":"object","properties":{"stages":{"type":["array","null"],"items":{"type":"array","items":{"type":"array","items":[{"$ref":"#/definitions/Addr"},{"$ref":"#/definitions/Denom"}],"maxItems":2,"minItems":2}}},"withdrawals":{"type":["array","null"],"items":{"type":"array","items":[{"$ref":"#/definitions/WithdrawType"},{"$ref":"#/definitions/Addr"},{"$ref":"#/definitions/Denom"}],"maxItems":3,"minItems":3}}},"additionalProperties":false}},"additionalProperties":false},{"type":"object","required":["tune_delegations"],"properties":{"tune_delegations":{"type":"object","additionalProperties":false}},"additionalProperties":false},{"description":"Use redelegations to balance the amounts of Token delegated to validators","type":"object","required":["rebalance"],"properties":{"rebalance":{"type":"object","properties":{"min_redelegation":{"anyOf":[{"$ref":"#/definitions/Uint128"},{"type":"null"}]}},"additionalProperties":false}},"additionalProperties":false},{"description":"Update Token amounts in unbonding batches to reflect any slashing or rounding errors","type":"object","required":["reconcile"],"properties":{"reconcile":{"type":"object","additionalProperties":false}},"additionalProperties":false},{"description":"Submit the current pending batch of unbonding requests to be unbonded","type":"object","required":["submit_batch"],"properties":{"submit_batch":{"type":"object","additionalProperties":false}},"additionalProperties":false},{"description":"Vote on a proposal (only allowed by the vote_operator)","type":"object","required":["vote"],"properties":{"vote":{"type":"object","required":["proposal_id","vote"],"properties":{"proposal_id":{"type":"integer","format":"uint64","minimum":0},"vote":{"$ref":"#/definitions/VoteOption"}},"additionalProperties":false}},"additionalProperties":false},{"description":"Vote on a proposal weighted (only allowed by the vote_operator)","type":"object","required":["vote_weighted"],"properties":{"vote_weighted":{"type":"object","required":["proposal_id","votes"],"properties":{"proposal_id":{"type":"integer","format":"uint64","minimum":0},"votes":{"type":"array","items":{"type":"array","items":[{"$ref":"#/definitions/Decimal"},{"$ref":"#/definitions/VoteOption"}],"maxItems":2,"minItems":2}}},"additionalProperties":false}},"additionalProperties":false},{"description":"Callbacks; can only be invoked by the contract itself","type":"object","required":["callback"],"properties":{"callback":{"$ref":"#/definitions/CallbackMsg"}},"additionalProperties":false},{"description":"Updates the fee config,","type":"object","required":["update_config"],"properties":{"update_config":{"type":"object","properties":{"allow_donations":{"description":"Specifies wether donations are allowed.","type":["boolean","null"]},"delegation_strategy":{"description":"Strategy how delegations should be handled","anyOf":[{"$ref":"#/definitions/DelegationStrategy_for_String"},{"type":"null"}]},"operator":{"description":"Sets a new operator","type":["string","null"]},"protocol_fee_contract":{"description":"Contract address where fees are sent","type":["string","null"]},"protocol_reward_fee":{"description":"Fees that are being applied during reinvest of staking rewards","anyOf":[{"$ref":"#/definitions/Decimal"},{"type":"null"}]},"stages_preset":{"description":"Sets the stages preset","type":["array","null"],"items":{"type":"array","items":{"type":"array","items":[{"$ref":"#/definitions/Addr"},{"$ref":"#/definitions/Denom"}],"maxItems":2,"minItems":2}}},"vote_operator":{"description":"Update the vote_operator","type":["string","null"]}},"additionalProperties":false}},"additionalProperties":false},{"description":"Submit an unbonding request to the current unbonding queue; automatically invokes `unbond` if `epoch_time` has elapsed since when the last unbonding queue was executed.","type":"object","required":["queue_unbond"],"properties":{"queue_unbond":{"type":"object","properties":{"receiver":{"type":["string","null"]}},"additionalProperties":false}},"additionalProperties":false}],"definitions":{"Addr":{"description":"A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.","type":"string"},"CallbackMsg":{"oneOf":[{"type":"object","required":["claim_funds"],"properties":{"claim_funds":{"type":"object","properties":{"withdrawals":{"type":["array","null"],"items":{"type":"array","items":[{"$ref":"#/definitions/WithdrawType"},{"$ref":"#/definitions/Addr"},{"$ref":"#/definitions/Denom"}],"maxItems":3,"minItems":3}}},"additionalProperties":false}},"additionalProperties":false},{"description":"Swap remaining tokens held by the contract to Token","type":"object","required":["swap"],"properties":{"swap":{"type":"object","required":["sender"],"properties":{"sender":{"$ref":"#/definitions/Addr"},"stages":{"type":["array","null"],"items":{"type":"array","items":{"type":"array","items":[{"$ref":"#/definitions/Addr"},{"$ref":"#/definitions/Denom"}],"maxItems":2,"minItems":2}}}},"additionalProperties":false}},"additionalProperties":false},{"description":"Following the swaps, stake the Token acquired to the whitelisted validators","type":"object","required":["reinvest"],"properties":{"reinvest":{"type":"object","additionalProperties":false}},"additionalProperties":false},{"type":"object","required":["check_received_coin"],"properties":{"check_received_coin":{"type":"object","required":["snapshot","snapshot_stake"],"properties":{"snapshot":{"$ref":"#/definitions/Coin"},"snapshot_stake":{"$ref":"#/definitions/Coin"}},"additionalProperties":false}},"additionalProperties":false}]},"Coin":{"type":"object","required":["amount","denom"],"properties":{"amount":{"$ref":"#/definitions/Uint128"},"denom":{"type":"string"}}},"Decimal":{"description":"A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)","type":"string"},"DelegationStrategy_for_String":{"oneOf":[{"type":"string","enum":["uniform"]},{"type":"object","required":["defined"],"properties":{"defined":{"type":"object","required":["shares_bps"],"properties":{"shares_bps":{"type":"array","items":{"type":"array","items":[{"type":"string"},{"type":"integer","format":"uint16","minimum":0}],"maxItems":2,"minItems":2}}},"additionalProperties":false}},"additionalProperties":false},{"description":"validators receive delegations based on community voting + merit points","type":"object","required":["gauges"],"properties":{"gauges":{"type":"object","required":["amp_factor_bps","amp_gauges","max_delegation_bps","min_delegation_bps","validator_count"],"properties":{"amp_factor_bps":{"description":"weight between amp and emp gauges between 0 and 1","type":"integer","format":"uint16","minimum":0},"amp_gauges":{"description":"gauges based on vAmp voting","type":"string"},"emp_gauges":{"description":"gauges based on eris merit points","type":["string","null"]},"max_delegation_bps":{"description":"max amount of delegation needed","type":"integer","format":"uint16","minimum":0},"min_delegation_bps":{"description":"min amount of delegation needed","type":"integer","format":"uint16","minimum":0},"validator_count":{"description":"count of validators that should receive delegations","type":"integer","format":"uint8","minimum":0}},"additionalProperties":false}},"additionalProperties":false}]},"Denom":{"type":"string"},"Uint128":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"},"VoteOption":{"type":"string","enum":["yes","no","abstain","no_with_veto"]},"WithdrawType":{"type":"string","enum":["black_whale","bow"]}}}