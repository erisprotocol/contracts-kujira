{"$schema":"http://json-schema.org/draft-07/schema#","title":"ConfigResponse","type":"object","required":["allow_donations","delegation_strategy","epoch_period","fee_config","operator","owner","stages_preset","stake_token","unbond_period","validators"],"properties":{"allow_donations":{"description":"Specifies wether donations are allowed.","type":"boolean"},"delegation_strategy":{"description":"Strategy how delegations should be handled","allOf":[{"$ref":"#/definitions/DelegationStrategy_for_Addr"}]},"epoch_period":{"description":"How often the unbonding queue is to be executed, in seconds","type":"integer","format":"uint64","minimum":0},"fee_config":{"description":"Information about applied fees","allOf":[{"$ref":"#/definitions/FeeConfig"}]},"new_owner":{"description":"Pending ownership transfer, awaiting acceptance by the new owner","type":["string","null"]},"operator":{"description":"Account who can call harvest","type":"string"},"owner":{"description":"Account who can call certain privileged functions","type":"string"},"stages_preset":{"description":"Stages that must be used by permissionless users","type":"array","items":{"type":"array","items":{"type":"array","items":[{"$ref":"#/definitions/Addr"},{"$ref":"#/definitions/Denom"}],"maxItems":2,"minItems":2}}},"stake_token":{"description":"Address of the Stake token","type":"string"},"unbond_period":{"description":"The staking module's unbonding time, in seconds","type":"integer","format":"uint64","minimum":0},"validators":{"description":"Initial set of validators who will receive the delegations","type":"array","items":{"type":"string"}},"vote_operator":{"description":"Update the vote_operator","type":["string","null"]}},"definitions":{"Addr":{"description":"A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.","type":"string"},"Decimal":{"description":"A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)","type":"string"},"DelegationStrategy_for_Addr":{"oneOf":[{"type":"string","enum":["uniform"]},{"type":"object","required":["defined"],"properties":{"defined":{"type":"object","required":["shares_bps"],"properties":{"shares_bps":{"type":"array","items":{"type":"array","items":[{"type":"string"},{"type":"integer","format":"uint16","minimum":0}],"maxItems":2,"minItems":2}}},"additionalProperties":false}},"additionalProperties":false},{"description":"validators receive delegations based on community voting + merit points","type":"object","required":["gauges"],"properties":{"gauges":{"type":"object","required":["amp_factor_bps","amp_gauges","max_delegation_bps","min_delegation_bps","validator_count"],"properties":{"amp_factor_bps":{"description":"weight between amp and emp gauges between 0 and 1","type":"integer","format":"uint16","minimum":0},"amp_gauges":{"description":"gauges based on vAmp voting","allOf":[{"$ref":"#/definitions/Addr"}]},"emp_gauges":{"description":"gauges based on eris merit points","anyOf":[{"$ref":"#/definitions/Addr"},{"type":"null"}]},"max_delegation_bps":{"description":"max amount of delegation needed","type":"integer","format":"uint16","minimum":0},"min_delegation_bps":{"description":"min amount of delegation needed","type":"integer","format":"uint16","minimum":0},"validator_count":{"description":"count of validators that should receive delegations","type":"integer","format":"uint8","minimum":0}},"additionalProperties":false}},"additionalProperties":false}]},"Denom":{"type":"string"},"FeeConfig":{"type":"object","required":["protocol_fee_contract","protocol_reward_fee"],"properties":{"protocol_fee_contract":{"description":"Contract address where fees are sent","allOf":[{"$ref":"#/definitions/Addr"}]},"protocol_reward_fee":{"description":"Fees that are being applied during reinvest of staking rewards","allOf":[{"$ref":"#/definitions/Decimal"}]}}}}}